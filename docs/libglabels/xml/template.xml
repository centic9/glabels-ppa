<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="libglabels-template">
<refmeta>
<refentrytitle role="top_of_page" id="libglabels-template.top_of_page">The lglTemplate Structure</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGLABELS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>The lglTemplate Structure</refname>
<refpurpose>How templates are represented in memory</refpurpose>
</refnamediv>

<refsynopsisdiv id="libglabels-template.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libglabels/template.h&gt;

                    <link linkend="lglTemplate">lglTemplate</link>;

                    <link linkend="lglTemplateAlias">lglTemplateAlias</link>;

enum                <link linkend="lglTemplateFrameShape">lglTemplateFrameShape</link>;
union               <link linkend="lglTemplateFrame">lglTemplateFrame</link>;
                    <link linkend="lglTemplateFrameAll">lglTemplateFrameAll</link>;
                    <link linkend="lglTemplateFrameRect">lglTemplateFrameRect</link>;
                    <link linkend="lglTemplateFrameRound">lglTemplateFrameRound</link>;
                    <link linkend="lglTemplateFrameCD">lglTemplateFrameCD</link>;

                    <link linkend="lglTemplateLayout">lglTemplateLayout</link>;

enum                <link linkend="lglTemplateMarkupType">lglTemplateMarkupType</link>;
union               <link linkend="lglTemplateMarkup">lglTemplateMarkup</link>;
                    <link linkend="lglTemplateMarkupMargin">lglTemplateMarkupMargin</link>;
                    <link linkend="lglTemplateMarkupLine">lglTemplateMarkupLine</link>;
                    <link linkend="lglTemplateMarkupCircle">lglTemplateMarkupCircle</link>;
                    <link linkend="lglTemplateMarkupRect">lglTemplateMarkupRect</link>;

                    <link linkend="lglTemplateOrigin">lglTemplateOrigin</link>;

<link linkend="lglTemplate">lglTemplate</link> *       <link linkend="lgl-template-new">lgl_template_new</link>                    (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part,
                                                         const <link linkend="gchar">gchar</link> *description,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         <link linkend="gdouble">gdouble</link> page_width,
                                                         <link linkend="gdouble">gdouble</link> page_height);
<link linkend="lglTemplate">lglTemplate</link> *       <link linkend="lgl-template-dup">lgl_template_dup</link>                    (const <link linkend="lglTemplate">lglTemplate</link> *orig_template);
<link linkend="void">void</link>                <link linkend="lgl-template-free">lgl_template_free</link>                   (<link linkend="lglTemplate">lglTemplate</link> *template);
<link linkend="void">void</link>                <link linkend="lgl-template-add-category">lgl_template_add_category</link>           (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *category_id);
<link linkend="void">void</link>                <link linkend="lgl-template-add-frame">lgl_template_add_frame</link>              (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);
<link linkend="void">void</link>                <link linkend="lgl-template-add-alias">lgl_template_add_alias</link>              (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="lglTemplateAlias">lglTemplateAlias</link> *alias);

<link linkend="gchar">gchar</link> *             <link linkend="lgl-template-get-name">lgl_template_get_name</link>               (const <link linkend="lglTemplate">lglTemplate</link> *template);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-template-do-templates-match">lgl_template_do_templates_match</link>     (const <link linkend="lglTemplate">lglTemplate</link> *template1,
                                                         const <link linkend="lglTemplate">lglTemplate</link> *template2);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-template-does-brand-match">lgl_template_does_brand_match</link>       (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *brand);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-template-does-page-size-match">lgl_template_does_page_size_match</link>   (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *paper_id);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-template-does-category-match">lgl_template_does_category_match</link>    (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *category_id);

<link linkend="lglTemplateAlias">lglTemplateAlias</link> *  <link linkend="lgl-template-alias-new">lgl_template_alias_new</link>              (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part);
<link linkend="lglTemplateAlias">lglTemplateAlias</link> *  <link linkend="lgl-template-alias-dup">lgl_template_alias_dup</link>              (const <link linkend="lglTemplateAlias">lglTemplateAlias</link> *orig_alias);
<link linkend="void">void</link>                <link linkend="lgl-template-alias-free">lgl_template_alias_free</link>             (<link linkend="lglTemplateAlias">lglTemplateAlias</link> *alias);

<link linkend="lglTemplateFrame">lglTemplateFrame</link> *  <link linkend="lgl-template-frame-rect-new">lgl_template_frame_rect_new</link>         (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> r,
                                                         <link linkend="gdouble">gdouble</link> x_waste,
                                                         <link linkend="gdouble">gdouble</link> y_waste);
<link linkend="lglTemplateFrame">lglTemplateFrame</link> *  <link linkend="lgl-template-frame-round-new">lgl_template_frame_round_new</link>        (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> r,
                                                         <link linkend="gdouble">gdouble</link> waste);
<link linkend="lglTemplateFrame">lglTemplateFrame</link> *  <link linkend="lgl-template-frame-cd-new">lgl_template_frame_cd_new</link>           (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> r1,
                                                         <link linkend="gdouble">gdouble</link> r2,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> waste);
<link linkend="lglTemplateFrame">lglTemplateFrame</link> *  <link linkend="lgl-template-frame-dup">lgl_template_frame_dup</link>              (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *orig_frame);
<link linkend="void">void</link>                <link linkend="lgl-template-frame-free">lgl_template_frame_free</link>             (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);
<link linkend="void">void</link>                <link linkend="lgl-template-frame-add-layout">lgl_template_frame_add_layout</link>       (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="lglTemplateLayout">lglTemplateLayout</link> *layout);
<link linkend="void">void</link>                <link linkend="lgl-template-frame-add-markup">lgl_template_frame_add_markup</link>       (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *markup);

<link linkend="void">void</link>                <link linkend="lgl-template-frame-get-size">lgl_template_frame_get_size</link>         (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="gdouble">gdouble</link> *w,
                                                         <link linkend="gdouble">gdouble</link> *h);
<link linkend="gint">gint</link>                <link linkend="lgl-template-frame-get-n-labels">lgl_template_frame_get_n_labels</link>     (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);
<link linkend="lglTemplateOrigin">lglTemplateOrigin</link> * <link linkend="lgl-template-frame-get-origins">lgl_template_frame_get_origins</link>      (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);

<link linkend="lglTemplateLayout">lglTemplateLayout</link> * <link linkend="lgl-template-layout-new">lgl_template_layout_new</link>             (<link linkend="gint">gint</link> nx,
                                                         <link linkend="gint">gint</link> ny,
                                                         <link linkend="gdouble">gdouble</link> x0,
                                                         <link linkend="gdouble">gdouble</link> y0,
                                                         <link linkend="gdouble">gdouble</link> dx,
                                                         <link linkend="gdouble">gdouble</link> dy);
<link linkend="lglTemplateLayout">lglTemplateLayout</link> * <link linkend="lgl-template-layout-dup">lgl_template_layout_dup</link>             (const <link linkend="lglTemplateLayout">lglTemplateLayout</link> *orig_layout);
<link linkend="void">void</link>                <link linkend="lgl-template-layout-free">lgl_template_layout_free</link>            (<link linkend="lglTemplateLayout">lglTemplateLayout</link> *layout);

<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * <link linkend="lgl-template-markup-margin-new">lgl_template_markup_margin_new</link>      (<link linkend="gdouble">gdouble</link> size);
<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * <link linkend="lgl-template-markup-line-new">lgl_template_markup_line_new</link>        (<link linkend="gdouble">gdouble</link> x1,
                                                         <link linkend="gdouble">gdouble</link> y1,
                                                         <link linkend="gdouble">gdouble</link> x2,
                                                         <link linkend="gdouble">gdouble</link> y2);
<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * <link linkend="lgl-template-markup-circle-new">lgl_template_markup_circle_new</link>      (<link linkend="gdouble">gdouble</link> x0,
                                                         <link linkend="gdouble">gdouble</link> y0,
                                                         <link linkend="gdouble">gdouble</link> r);
<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * <link linkend="lgl-template-markup-rect-new">lgl_template_markup_rect_new</link>        (<link linkend="gdouble">gdouble</link> x1,
                                                         <link linkend="gdouble">gdouble</link> y1,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> r);
<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * <link linkend="lgl-template-markup-dup">lgl_template_markup_dup</link>             (const <link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *orig_markup);
<link linkend="void">void</link>                <link linkend="lgl-template-markup-free">lgl_template_markup_free</link>            (<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *markup);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libglabels-template.description" role="desc">
<title role="desc.title">Description</title>
<para>
This section describes a set of structures that represent a template in memory.  It also
describes functions to help create and interpret these structures.
</para>
</refsect1>

<refsect1 id="libglabels-template.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="lglTemplate" role="struct">
<title>lglTemplate</title>
<indexterm zone="lglTemplate"><primary sortas="lglTemplate">lglTemplate</primary></indexterm><programlisting>typedef struct {
	gchar               *brand;
        gchar               *part;
	gchar               *description;
	gchar               *paper_id;
	gdouble              page_width;
	gdouble              page_height;

	/* List of (lglTemplateAlias *) aliase structures. */
	GList               *aliases;

        /* List of (gchar *) category ids. */
	GList               *category_ids;

	/* List of (lglTemplateFrame *) label frame structures.
	 * Currently glabels only supports a single label frame per
	 * template. */
	GList               *frames;
} lglTemplate;
</programlisting>
<para>
This is the main structure of a libglabels template.  A template represents a single sheet
of peel-off labels or cards.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>brand</structfield>;</term>
<listitem><simpara>Brand name of label or card.  E.g. "Avery."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>part</structfield>;</term>
<listitem><simpara>Part name or number of label or card.  E.g. "8160."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>description</structfield>;</term>
<listitem><simpara>A description of the template.  E.g. "Mailing labels."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>paper_id</structfield>;</term>
<listitem><simpara>A paper ID.  E.g. "A4" or "US-Letter."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>page_width</structfield>;</term>
<listitem><simpara>Page width in points.  Used only if paper_id is "Other."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>page_height</structfield>;</term>
<listitem><simpara>Page height in points.  Used only if paper_id is "Other."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>aliases</structfield>;</term>
<listitem><simpara>A list of alternate names for this template.  Often a single template can be used for
multiple products.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>category_ids</structfield>;</term>
<listitem><simpara>A list of category IDs that this template belongs to.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>frames</structfield>;</term>
<listitem><simpara>A list of (<link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> *) structures.  GLabels currently only supports one frame
per template -- future versions may support multiple frames per template.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateAlias" role="struct">
<title>lglTemplateAlias</title>
<indexterm zone="lglTemplateAlias"><primary sortas="lglTemplateAlias">lglTemplateAlias</primary></indexterm><programlisting>typedef struct {
	gchar               *brand;
        gchar               *part;
} lglTemplateAlias;
</programlisting>
<para>
This structure defines an alias for the parent template structure.  An alias is used for
different products that can use the same template.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>brand</structfield>;</term>
<listitem><simpara>Brand name of label or card.  E.g. "Avery."
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>part</structfield>;</term>
<listitem><simpara>Part name or number of label or card.  E.g. "8160."
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateFrameShape" role="enum">
<title>enum lglTemplateFrameShape</title>
<indexterm zone="lglTemplateFrameShape"><primary sortas="lglTemplateFrameShape">lglTemplateFrameShape</primary></indexterm><programlisting>typedef enum {
	LGL_TEMPLATE_FRAME_SHAPE_RECT,
	LGL_TEMPLATE_FRAME_SHAPE_ROUND,
	LGL_TEMPLATE_FRAME_SHAPE_CD,
} lglTemplateFrameShape;
</programlisting>
<para>
This enumeration defines frame types that are supported by libglabels
</para><variablelist role="enum">
<varlistentry id="LGL-TEMPLATE-FRAME-SHAPE-RECT--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_FRAME_SHAPE_RECT</literal></term>
<listitem><simpara>A rectangular frame.  (May have rounded corners.)
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-TEMPLATE-FRAME-SHAPE-ROUND--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_FRAME_SHAPE_ROUND</literal></term>
<listitem><simpara>A round frame.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-TEMPLATE-FRAME-SHAPE-CD--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_FRAME_SHAPE_CD</literal></term>
<listitem><simpara>A CD or DVD frame.  (Includes credit-card style CDs.)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateFrame" role="union">
<title>union lglTemplateFrame</title>
<indexterm zone="lglTemplateFrame"><primary sortas="lglTemplateFrame">lglTemplateFrame</primary></indexterm><programlisting>union lglTemplateFrame{

	lglTemplateFrameShape shape;

	lglTemplateFrameAll   all;
	lglTemplateFrameRect  rect;
	lglTemplateFrameRound round;
	lglTemplateFrameCD    cd;
};
</programlisting>
<para>
A union of all possible frame structures.  The type of structure is indicated by the shape
member, which overlays the first field of all other member structures.
</para></refsect2>
<refsect2 id="lglTemplateFrameAll" role="struct">
<title>lglTemplateFrameAll</title>
<indexterm zone="lglTemplateFrameAll"><primary sortas="lglTemplateFrameAll">lglTemplateFrameAll</primary></indexterm><programlisting>typedef struct {
        /* Begin Common Fields */
	lglTemplateFrameShape shape;

	gchar                *id;       /* Id, currently always "0" */
	GList                *layouts;  /* List of lglTemplateLayouts */
	GList                *markups;  /* List of lglTemplateMarkups */
        /* End Common Fields */
} lglTemplateFrameAll;
</programlisting>
<para>
This structure is composed of a set of fields common to all frame structures.  All frame types
can be cast to this structure.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateFrameShape">lglTemplateFrameShape</link>&#160;<structfield>shape</structfield>;</term>
<listitem><simpara>The shape of the frame.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>id</structfield>;</term>
<listitem><simpara>Reserved for future use.  Should always be zero.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>layouts</structfield>;</term>
<listitem><simpara>A list of (<link linkend="lglTemplateLayout"><type>lglTemplateLayout</type></link> *) structures.  Typically a frame will have a single
layout, representing a simple grid of labels or cards.  If the layout of labels or cards is
more complex, multiple (<link linkend="lglTemplateLayout"><type>lglTemplateLayout</type></link> *) structures may be needed.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>markups</structfield>;</term>
<listitem><simpara>A list of (<link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> *) structures, which represent non-printing markup lines.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateFrameRect" role="struct">
<title>lglTemplateFrameRect</title>
<indexterm zone="lglTemplateFrameRect"><primary sortas="lglTemplateFrameRect">lglTemplateFrameRect</primary></indexterm><programlisting>typedef struct {
        /* Begin Common Fields */
	lglTemplateFrameShape shape;    /* Always LGL_TEMPLATE_FRAME_SHAPE_RECT. */

	gchar                *id;       /* Id, currently always "0" */
	GList                *layouts;  /* List of lglTemplateLayouts */
	GList                *markups;  /* List of lglTemplateMarkups */
        /* End Common Fields */

        gdouble               w;        /* Width */
        gdouble               h;        /* Height */
        gdouble               r;        /* Corner radius */
        gdouble               x_waste;  /* Amount of horiz overprint allowed. */
        gdouble               y_waste;  /* Amount of vert overprint allowed. */
} lglTemplateFrameRect;
</programlisting>
<para>
This structure defines the frame for a rectangular label or card.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateFrameShape">lglTemplateFrameShape</link>&#160;<structfield>shape</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-FRAME-SHAPE-RECT--CAPS"><type>LGL_TEMPLATE_FRAME_SHAPE_RECT</type></link> for <link linkend="lglTemplateFrameRect"><type>lglTemplateFrameRect</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>id</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>layouts</structfield>;</term>
<listitem><simpara> Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>markups</structfield>;</term>
<listitem><simpara> Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>w</structfield>;</term>
<listitem><simpara>Width of label or card in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>h</structfield>;</term>
<listitem><simpara>Height of label or card in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r</structfield>;</term>
<listitem><simpara>Radius of corners in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x_waste</structfield>;</term>
<listitem><simpara>Amount of horizontal over-print to allow in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y_waste</structfield>;</term>
<listitem><simpara>Amount of vertical over-print to allow in points.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateFrameRound" role="struct">
<title>lglTemplateFrameRound</title>
<indexterm zone="lglTemplateFrameRound"><primary sortas="lglTemplateFrameRound">lglTemplateFrameRound</primary></indexterm><programlisting>typedef struct {
        /* Begin Common Fields */
	lglTemplateFrameShape shape;    /* Always LGL_TEMPLATE_FRAME_SHAPE_ROUND. */

	gchar                *id;       /* Id, currently always "0" */
	GList                *layouts;  /* List of lglTemplateLayouts */
	GList                *markups;  /* List of lglTemplateMarkups */
        /* End Common Fields */

        gdouble               r;      /* Radius */
        gdouble               waste;  /* Amount of overprint allowed. */
} lglTemplateFrameRound;
</programlisting>
<para>
This structure defines the frame for a round label or card.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateFrameShape">lglTemplateFrameShape</link>&#160;<structfield>shape</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-FRAME-SHAPE-ROUND--CAPS"><type>LGL_TEMPLATE_FRAME_SHAPE_ROUND</type></link> for <link linkend="lglTemplateFrameRound"><type>lglTemplateFrameRound</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>id</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>layouts</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>markups</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r</structfield>;</term>
<listitem><simpara>Radius of label or card in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>waste</structfield>;</term>
<listitem><simpara>Amount of over-print to allow in points.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateFrameCD" role="struct">
<title>lglTemplateFrameCD</title>
<indexterm zone="lglTemplateFrameCD"><primary sortas="lglTemplateFrameCD">lglTemplateFrameCD</primary></indexterm><programlisting>typedef struct {
        /* Begin Common Fields */
	lglTemplateFrameShape shape;    /* Always LGL_TEMPLATE_FRAME_SHAPE_CD. */

	gchar                *id;       /* Id, currently always "0" */
	GList                *layouts;  /* List of lglTemplateLayouts */
	GList                *markups;  /* List of lglTemplateMarkups */
        /* End Common Fields */

        gdouble               r1;     /* Outer radius */
        gdouble               r2;     /* Inner radius (hole) */
        gdouble               w;      /* Clip width, business card CDs */
        gdouble               h;      /* Clip height, business card CDs */
        gdouble               waste;  /* Amount of overprint allowed. */
} lglTemplateFrameCD;
</programlisting>
<para>
This structure defines the frame for a CD or DVD label.  This structure also supports
credit-card CD labels.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateFrameShape">lglTemplateFrameShape</link>&#160;<structfield>shape</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-FRAME-SHAPE-CD--CAPS"><type>LGL_TEMPLATE_FRAME_SHAPE_CD</type></link> for <link linkend="lglTemplateFrameCD"><type>lglTemplateFrameCD</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>id</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>layouts</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&#160;*<structfield>markups</structfield>;</term>
<listitem><simpara>Common field.  See <link linkend="lglTemplateFrameAll"><type>lglTemplateFrameAll</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r1</structfield>;</term>
<listitem><simpara>Outer radius of label in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r2</structfield>;</term>
<listitem><simpara>Radius of center hole in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>w</structfield>;</term>
<listitem><simpara>Clip width in points.  Used for credit-card CD labels.  This field is ignored if zero.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>h</structfield>;</term>
<listitem><simpara>Clip height in points.  Used for credit-card CD labels.  This field is ignored if zero.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>waste</structfield>;</term>
<listitem><simpara>Amount of over-print to allow in points.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateLayout" role="struct">
<title>lglTemplateLayout</title>
<indexterm zone="lglTemplateLayout"><primary sortas="lglTemplateLayout">lglTemplateLayout</primary></indexterm><programlisting>typedef struct {
	gint                  nx;  /* Number of labels across */
	gint                  ny;  /* Number of labels up and down */

	gdouble               x0;  /* Left of grid from left edge of paper */
	gdouble               y0;  /* Top of grid from top edge of paper */

	gdouble               dx;  /* Horizontal pitch of grid */
	gdouble               dy;  /* Vertical pitch of grid */
} lglTemplateLayout;
</programlisting>
<para>
This structure defines a simple grid layout of labels or cards.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>nx</structfield>;</term>
<listitem><simpara>Number of labels or cards across in the grid (horizontal).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint">gint</link>&#160;<structfield>ny</structfield>;</term>
<listitem><simpara>Number of labels or cards down in the grid (vertical).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x0</structfield>;</term>
<listitem><simpara>Distance (in points) from the left edge of page to the left edge of the left column of
cards or labels in the layout.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y0</structfield>;</term>
<listitem><simpara>Distance (in points) from the top edge of page to the top edge of the top row of
cards or labels in the layout.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>dx</structfield>;</term>
<listitem><simpara>Horizontal pitch of grid in points.  This is the distance from left edge to left edge
(not the gap between labels or cards).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>dy</structfield>;</term>
<listitem><simpara>Vertical pitch of grid in points.  This is the distance from top edge to top edge
(not the gap between labels or cards).
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateMarkupType" role="enum">
<title>enum lglTemplateMarkupType</title>
<indexterm zone="lglTemplateMarkupType"><primary sortas="lglTemplateMarkupType">lglTemplateMarkupType</primary></indexterm><programlisting>typedef enum {
	LGL_TEMPLATE_MARKUP_MARGIN,
	LGL_TEMPLATE_MARKUP_LINE,
	LGL_TEMPLATE_MARKUP_CIRCLE,
	LGL_TEMPLATE_MARKUP_RECT,
} lglTemplateMarkupType;
</programlisting>
<para>
This enumeration defines markup types that are supported by libglabels
</para><variablelist role="enum">
<varlistentry id="LGL-TEMPLATE-MARKUP-MARGIN--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_MARKUP_MARGIN</literal></term>
<listitem><simpara>A margin line around perimeter of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-TEMPLATE-MARKUP-LINE--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_MARKUP_LINE</literal></term>
<listitem><simpara>A simple line segment.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-TEMPLATE-MARKUP-CIRCLE--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_MARKUP_CIRCLE</literal></term>
<listitem><simpara>A circle.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-TEMPLATE-MARKUP-RECT--CAPS" role="constant">
<term><literal>LGL_TEMPLATE_MARKUP_RECT</literal></term>
<listitem><simpara>A rectangle.  Possibly with rounded corners.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateMarkup" role="union">
<title>union lglTemplateMarkup</title>
<indexterm zone="lglTemplateMarkup"><primary sortas="lglTemplateMarkup">lglTemplateMarkup</primary></indexterm><programlisting>union lglTemplateMarkup {

	lglTemplateMarkupType   type;

	lglTemplateMarkupMargin margin;
	lglTemplateMarkupLine   line;
	lglTemplateMarkupCircle circle;
	lglTemplateMarkupRect   rect;
};
</programlisting>
<para>
A union of all possible markup structures.  The type of structure is indicated by the type
member, which overlays the first field of all other member structures.
</para></refsect2>
<refsect2 id="lglTemplateMarkupMargin" role="struct">
<title>lglTemplateMarkupMargin</title>
<indexterm zone="lglTemplateMarkupMargin"><primary sortas="lglTemplateMarkupMargin">lglTemplateMarkupMargin</primary></indexterm><programlisting>typedef struct {
	lglTemplateMarkupType  type;  /* Always LGL_TEMPLATE_MARKUP_MARGIN */

        gdouble                size;  /* Margin size */
} lglTemplateMarkupMargin;
</programlisting>
<para>
This structure defines a simple margin markup around the perimeter of a label or card.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateMarkupType">lglTemplateMarkupType</link>&#160;<structfield>type</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-MARKUP-MARGIN--CAPS"><type>LGL_TEMPLATE_MARKUP_MARGIN</type></link> for <link linkend="lglTemplateMarkupMargin"><type>lglTemplateMarkupMargin</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>size</structfield>;</term>
<listitem><simpara>Distance of margin from edge of label or card.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateMarkupLine" role="struct">
<title>lglTemplateMarkupLine</title>
<indexterm zone="lglTemplateMarkupLine"><primary sortas="lglTemplateMarkupLine">lglTemplateMarkupLine</primary></indexterm><programlisting>typedef struct {
	lglTemplateMarkupType  type;   /* Always LGL_TEMPLATE_MARKUP_LINE */

        gdouble                x1, y1; /* 1st endpoint */
        gdouble                x2, y2; /* 2nd endpoint */
} lglTemplateMarkupLine;
</programlisting>
<para>
This structure defines a simple line segment markup.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateMarkupType">lglTemplateMarkupType</link>&#160;<structfield>type</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-MARKUP-LINE--CAPS"><type>LGL_TEMPLATE_MARKUP_LINE</type></link> for <link linkend="lglTemplateMarkupLine"><type>lglTemplateMarkupLine</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x1</structfield>;</term>
<listitem><simpara>Distance (in points) of first endpoint from left edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y1</structfield>;</term>
<listitem><simpara>Distance (in points) of first endpoint from top edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x2</structfield>;</term>
<listitem><simpara>Distance (in points) of second endpoint from left edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y2</structfield>;</term>
<listitem><simpara>Distance (in points) of second endpoint from top edge of label or card.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateMarkupCircle" role="struct">
<title>lglTemplateMarkupCircle</title>
<indexterm zone="lglTemplateMarkupCircle"><primary sortas="lglTemplateMarkupCircle">lglTemplateMarkupCircle</primary></indexterm><programlisting>typedef struct {
	lglTemplateMarkupType  type;   /* Always LGL_TEMPLATE_MARKUP_CIRCLE */

        gdouble                x0, y0; /* Center of circle */
        gdouble                r;      /* Radius of circle */
} lglTemplateMarkupCircle;
</programlisting>
<para>
This structure defines a simple circle markup.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateMarkupType">lglTemplateMarkupType</link>&#160;<structfield>type</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-MARKUP-CIRCLE--CAPS"><type>LGL_TEMPLATE_MARKUP_CIRCLE</type></link> for <link linkend="lglTemplateMarkupCircle"><type>lglTemplateMarkupCircle</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x0</structfield>;</term>
<listitem><simpara>Distance (in points) of vertex from left edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y0</structfield>;</term>
<listitem><simpara>Distance (in points) of vertex from top edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r</structfield>;</term>
<listitem><simpara>Radius of circle in points.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateMarkupRect" role="struct">
<title>lglTemplateMarkupRect</title>
<indexterm zone="lglTemplateMarkupRect"><primary sortas="lglTemplateMarkupRect">lglTemplateMarkupRect</primary></indexterm><programlisting>typedef struct {
	lglTemplateMarkupType  type;   /* Always LGL_TEMPLATE_MARKUP_RECT */

        gdouble                x1, y1; /* Upper left corner */
        gdouble                w, h;   /* Width and height. */
        gdouble                r;      /* Radius of corners. */
} lglTemplateMarkupRect;
</programlisting>
<para>
This structure defines a simple rectangle markup.  The rectangle can have rounded corners.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="lglTemplateMarkupType">lglTemplateMarkupType</link>&#160;<structfield>type</structfield>;</term>
<listitem><simpara>Common field.  Always <link linkend="LGL-TEMPLATE-MARKUP-RECT--CAPS"><type>LGL_TEMPLATE_MARKUP_RECT</type></link> for <link linkend="lglTemplateMarkupRect"><type>lglTemplateMarkupRect</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x1</structfield>;</term>
<listitem><simpara>Distance (in points) of left edge of markup from left edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y1</structfield>;</term>
<listitem><simpara>Distance (in points) of top edge of markup from top edge of label or card.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>w</structfield>;</term>
<listitem><simpara>Width of rectangle in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>h</structfield>;</term>
<listitem><simpara>Height of rectangle in points.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>r</structfield>;</term>
<listitem><simpara>Radius of corners in points.  Should be zero for sharp corners.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lglTemplateOrigin" role="struct">
<title>lglTemplateOrigin</title>
<indexterm zone="lglTemplateOrigin"><primary sortas="lglTemplateOrigin">lglTemplateOrigin</primary></indexterm><programlisting>typedef struct {
	gdouble               x, y; /* Label origin relative to upper 
				     * upper left hand corner of paper */
} lglTemplateOrigin;
</programlisting>
<para>
This structure represents the cartesian coordinates of the origin of a label or card on the page.
The orign is the upper left corner of the extent of the label or card.  These coordinates are
relative to the upper left corner of the page.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>x</structfield>;</term>
<listitem><simpara>Distance in points from top edge of page.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gdouble">gdouble</link>&#160;<structfield>y</structfield>;</term>
<listitem><simpara>Distance in points from left edge of page.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-new" role="function">
<title>lgl_template_new ()</title>
<indexterm zone="lgl-template-new"><primary sortas="lgl_template_new">lgl_template_new</primary></indexterm><programlisting><link linkend="lglTemplate">lglTemplate</link> *       lgl_template_new                    (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part,
                                                         const <link linkend="gchar">gchar</link> *description,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         <link linkend="gdouble">gdouble</link> page_width,
                                                         <link linkend="gdouble">gdouble</link> page_height);</programlisting>
<para>
Create a new template structure, with the given top-level attributes.  The
created template will have no initial aliases, categories, or frames
associated with it.  See <link linkend="lgl-template-add-alias"><function>lgl_template_add_alias()</function></link>, <link linkend="lgl-template-add-category"><function>lgl_template_add_category()</function></link>,
and <link linkend="lgl-template-add-frame"><function>lgl_template_add_frame()</function></link> to add these.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara>        Template brand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara>         Template part name/number
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>description</parameter>&#160;:</term>
<listitem><simpara>  Template descriptions
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>paper_id</parameter>&#160;:</term>
<listitem><simpara>     Page size id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>page_width</parameter>&#160;:</term>
<listitem><simpara>   Page width in points, set to zero unless paper_id="Other"
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>page_height</parameter>&#160;:</term>
<listitem><simpara>  Page height in points, set to zero unless paper_id="Other"
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglTemplate"><type>lglTemplate</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-dup" role="function">
<title>lgl_template_dup ()</title>
<indexterm zone="lgl-template-dup"><primary sortas="lgl_template_dup">lgl_template_dup</primary></indexterm><programlisting><link linkend="lglTemplate">lglTemplate</link> *       lgl_template_dup                    (const <link linkend="lglTemplate">lglTemplate</link> *orig_template);</programlisting>
<para>
This function duplicates a template structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>orig_template</parameter>&#160;:</term>
<listitem><simpara> Template to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  a newly allocated <link linkend="lglTemplate"><type>lglTemplate</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-free" role="function">
<title>lgl_template_free ()</title>
<indexterm zone="lgl-template-free"><primary sortas="lgl_template_free">lgl_template_free</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_free                   (<link linkend="lglTemplate">lglTemplate</link> *template);</programlisting>
<para>
This function frees all memory associated with given template structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara> Template to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-add-category" role="function">
<title>lgl_template_add_category ()</title>
<indexterm zone="lgl-template-add-category"><primary sortas="lgl_template_add_category">lgl_template_add_category</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_add_category           (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *category_id);</programlisting>
<para>
This function adds the given category ID to a templates category list.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>     Pointer to template structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category_id</parameter>&#160;:</term>
<listitem><simpara>  Category ID string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-add-frame" role="function">
<title>lgl_template_add_frame ()</title>
<indexterm zone="lgl-template-add-frame"><primary sortas="lgl_template_add_frame">lgl_template_add_frame</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_add_frame              (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);</programlisting>
<para>
This function adds the given frame structure to the template.  Once added,
the frame structure belongs to the given template; do not attempt to free
it.
</para>
<para>
Note: Currently glabels only supports a single frame per template.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara>     Pointer to frame structure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-add-alias" role="function">
<title>lgl_template_add_alias ()</title>
<indexterm zone="lgl-template-add-alias"><primary sortas="lgl_template_add_alias">lgl_template_add_alias</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_add_alias              (<link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="lglTemplateAlias">lglTemplateAlias</link> *alias);</programlisting>
<para>
This function adds the given alias to a templates list of aliases.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alias</parameter>&#160;:</term>
<listitem><simpara>     Alias string
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-get-name" role="function">
<title>lgl_template_get_name ()</title>
<indexterm zone="lgl-template-get-name"><primary sortas="lgl_template_get_name">lgl_template_get_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lgl_template_get_name               (const <link linkend="lglTemplate">lglTemplate</link> *template);</programlisting>
<para>
This function returns the name of the given template.  The name is the concetenation
of the brand and part name/number.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  A pointer to a newly allocated name string.  Should be freed with <link linkend="g-free"><function>g_free()</function></link>.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-do-templates-match" role="function">
<title>lgl_template_do_templates_match ()</title>
<indexterm zone="lgl-template-do-templates-match"><primary sortas="lgl_template_do_templates_match">lgl_template_do_templates_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_template_do_templates_match     (const <link linkend="lglTemplate">lglTemplate</link> *template1,
                                                         const <link linkend="lglTemplate">lglTemplate</link> *template2);</programlisting>
<para>
This function tests if the given templates match.  This is a simple test that only tests
the brand and part name/number. It does not test if they are actually identical.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template1</parameter>&#160;:</term>
<listitem><simpara>  Pointer to 1st template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>template2</parameter>&#160;:</term>
<listitem><simpara>  Pointer to 2nd template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  TRUE if the two template matche.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-does-brand-match" role="function">
<title>lgl_template_does_brand_match ()</title>
<indexterm zone="lgl-template-does-brand-match"><primary sortas="lgl_template_does_brand_match">lgl_template_does_brand_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_template_does_brand_match       (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *brand);</programlisting>
<para>
This function tests if the brand of the template matches the given brand.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara>     Brand string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  TRUE if the template matches the given brand.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-does-page-size-match" role="function">
<title>lgl_template_does_page_size_match ()</title>
<indexterm zone="lgl-template-does-page-size-match"><primary sortas="lgl_template_does_page_size_match">lgl_template_does_page_size_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_template_does_page_size_match   (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *paper_id);</programlisting>
<para>
This function tests if the page size of the template matches the given ID.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>paper_id</parameter>&#160;:</term>
<listitem><simpara>  Page size ID string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  TRUE if the template matches the given page size ID.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-does-category-match" role="function">
<title>lgl_template_does_category_match ()</title>
<indexterm zone="lgl-template-does-category-match"><primary sortas="lgl_template_does_category_match">lgl_template_does_category_match</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_template_does_category_match    (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *category_id);</programlisting>
<para>
This function tests if the given template belongs to the given category ID.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>     Pointer to template structure to test
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category_id</parameter>&#160;:</term>
<listitem><simpara>  Category ID string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  TRUE if the template matches the given category ID.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-alias-new" role="function">
<title>lgl_template_alias_new ()</title>
<indexterm zone="lgl-template-alias-new"><primary sortas="lgl_template_alias_new">lgl_template_alias_new</primary></indexterm><programlisting><link linkend="lglTemplateAlias">lglTemplateAlias</link> *  lgl_template_alias_new              (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part);</programlisting>
<para>
Create a new template alias structure, with the given brand and part number.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara>        Alias brand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara>         Alias part name/number
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglTemplateAlias"><type>lglTemplateAlias</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-alias-dup" role="function">
<title>lgl_template_alias_dup ()</title>
<indexterm zone="lgl-template-alias-dup"><primary sortas="lgl_template_alias_dup">lgl_template_alias_dup</primary></indexterm><programlisting><link linkend="lglTemplateAlias">lglTemplateAlias</link> *  lgl_template_alias_dup              (const <link linkend="lglTemplateAlias">lglTemplateAlias</link> *orig_alias);</programlisting>
<para>
This function duplicates a template alias structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>orig_alias</parameter>&#160;:</term>
<listitem><simpara> Alias to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  a newly allocated <link linkend="lglTemplateAlias"><type>lglTemplateAlias</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-alias-free" role="function">
<title>lgl_template_alias_free ()</title>
<indexterm zone="lgl-template-alias-free"><primary sortas="lgl_template_alias_free">lgl_template_alias_free</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_alias_free             (<link linkend="lglTemplateAlias">lglTemplateAlias</link> *alias);</programlisting>
<para>
This function frees all memory associated with given template alias structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>alias</parameter>&#160;:</term>
<listitem><simpara> Alias to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-rect-new" role="function">
<title>lgl_template_frame_rect_new ()</title>
<indexterm zone="lgl-template-frame-rect-new"><primary sortas="lgl_template_frame_rect_new">lgl_template_frame_rect_new</primary></indexterm><programlisting><link linkend="lglTemplateFrame">lglTemplateFrame</link> *  lgl_template_frame_rect_new         (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> r,
                                                         <link linkend="gdouble">gdouble</link> x_waste,
                                                         <link linkend="gdouble">gdouble</link> y_waste);</programlisting>
<para>
This function creates a new template frame for a rectangular label or card.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>      ID of frame.  (This should currently always be "0").
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>w</parameter>&#160;:</term>
<listitem><simpara>       width of frame in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>h</parameter>&#160;:</term>
<listitem><simpara>       height of frame in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>       radius of rounded corners in points.  (Should be 0 for square corners.)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x_waste</parameter>&#160;:</term>
<listitem><simpara> Amount of overprint to allow in the horizontal direction.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_waste</parameter>&#160;:</term>
<listitem><simpara> Amount of overprint to allow in the vertical direction.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Pointer to newly allocated <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-round-new" role="function">
<title>lgl_template_frame_round_new ()</title>
<indexterm zone="lgl-template-frame-round-new"><primary sortas="lgl_template_frame_round_new">lgl_template_frame_round_new</primary></indexterm><programlisting><link linkend="lglTemplateFrame">lglTemplateFrame</link> *  lgl_template_frame_round_new        (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> r,
                                                         <link linkend="gdouble">gdouble</link> waste);</programlisting>
<para>
This function creates a new template frame for a round label.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>      ID of frame.  (This should currently always be "0").
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>       radius of label in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>waste</parameter>&#160;:</term>
<listitem><simpara>   Amount of overprint to allow.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Pointer to newly allocated <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-cd-new" role="function">
<title>lgl_template_frame_cd_new ()</title>
<indexterm zone="lgl-template-frame-cd-new"><primary sortas="lgl_template_frame_cd_new">lgl_template_frame_cd_new</primary></indexterm><programlisting><link linkend="lglTemplateFrame">lglTemplateFrame</link> *  lgl_template_frame_cd_new           (const <link linkend="gchar">gchar</link> *id,
                                                         <link linkend="gdouble">gdouble</link> r1,
                                                         <link linkend="gdouble">gdouble</link> r2,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> waste);</programlisting>
<para>
This function creates a new template frame for a CD/DVD label.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>      ID of frame.  (This should currently always be "0").
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r1</parameter>&#160;:</term>
<listitem><simpara>      outer radius of label in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r2</parameter>&#160;:</term>
<listitem><simpara>      radius of center hole in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>w</parameter>&#160;:</term>
<listitem><simpara>       clip width of frame in points for business card CDs.  Should be 0 for no clipping.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>h</parameter>&#160;:</term>
<listitem><simpara>       clip height of frame in points for business card CDs.  Should be 0 for no clipping.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>waste</parameter>&#160;:</term>
<listitem><simpara>   Amount of overprint to allow.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Pointer to newly allocated <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-dup" role="function">
<title>lgl_template_frame_dup ()</title>
<indexterm zone="lgl-template-frame-dup"><primary sortas="lgl_template_frame_dup">lgl_template_frame_dup</primary></indexterm><programlisting><link linkend="lglTemplateFrame">lglTemplateFrame</link> *  lgl_template_frame_dup              (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *orig_frame);</programlisting>
<para>
This function duplicates a template frame structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>orig_frame</parameter>&#160;:</term>
<listitem><simpara> Frame to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  a newly allocated <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-free" role="function">
<title>lgl_template_frame_free ()</title>
<indexterm zone="lgl-template-frame-free"><primary sortas="lgl_template_frame_free">lgl_template_frame_free</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_frame_free             (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);</programlisting>
<para>
This function frees all memory associated with given template frame structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara> Frame to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-add-layout" role="function">
<title>lgl_template_frame_add_layout ()</title>
<indexterm zone="lgl-template-frame-add-layout"><primary sortas="lgl_template_frame_add_layout">lgl_template_frame_add_layout</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_frame_add_layout       (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="lglTemplateLayout">lglTemplateLayout</link> *layout);</programlisting>
<para>
This function adds a layout structure to the given template frame.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template frame to add layout to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>layout</parameter>&#160;:</term>
<listitem><simpara> Pointer to layout structure to add to frame.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-add-markup" role="function">
<title>lgl_template_frame_add_markup ()</title>
<indexterm zone="lgl-template-frame-add-markup"><primary sortas="lgl_template_frame_add_markup">lgl_template_frame_add_markup</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_frame_add_markup       (<link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *markup);</programlisting>
<para>
This function adds a markup structure to the given template frame.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara>  Pointer to template frame to add markup to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>markup</parameter>&#160;:</term>
<listitem><simpara> Pointer to markup structure to add to frame.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-get-size" role="function">
<title>lgl_template_frame_get_size ()</title>
<indexterm zone="lgl-template-frame-get-size"><primary sortas="lgl_template_frame_get_size">lgl_template_frame_get_size</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_frame_get_size         (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame,
                                                         <link linkend="gdouble">gdouble</link> *w,
                                                         <link linkend="gdouble">gdouble</link> *h);</programlisting>
<para>
Get size (width and height) of given <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> in points.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara> <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure to query
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>w</parameter>&#160;:</term>
<listitem><simpara> pointer to location to receive width of frame
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>h</parameter>&#160;:</term>
<listitem><simpara> pointer to location to receive height of frame
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-get-n-labels" role="function">
<title>lgl_template_frame_get_n_labels ()</title>
<indexterm zone="lgl-template-frame-get-n-labels"><primary sortas="lgl_template_frame_get_n_labels">lgl_template_frame_get_n_labels</primary></indexterm><programlisting><link linkend="gint">gint</link>                lgl_template_frame_get_n_labels     (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);</programlisting>
<para>
Get total number of labels per sheet corresponding to the given frame.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara> <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure to query
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> number of labels per sheet.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-frame-get-origins" role="function">
<title>lgl_template_frame_get_origins ()</title>
<indexterm zone="lgl-template-frame-get-origins"><primary sortas="lgl_template_frame_get_origins">lgl_template_frame_get_origins</primary></indexterm><programlisting><link linkend="lglTemplateOrigin">lglTemplateOrigin</link> * lgl_template_frame_get_origins      (const <link linkend="lglTemplateFrame">lglTemplateFrame</link> *frame);</programlisting>
<para>
Get an array of label origins for the given frame.  These origins represent the
upper left hand corner of each label on a page corresponding to the given frame.
The origins will be ordered geometrically left to right and then top to bottom.
The array should be freed using <link linkend="g-free"><function>g_free()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>frame</parameter>&#160;:</term>
<listitem><simpara> <link linkend="lglTemplateFrame"><type>lglTemplateFrame</type></link> structure to query
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A newly allocated array of <link linkend="lglTemplateOrigin"><type>lglTemplateOrigin</type></link> structures.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-layout-new" role="function">
<title>lgl_template_layout_new ()</title>
<indexterm zone="lgl-template-layout-new"><primary sortas="lgl_template_layout_new">lgl_template_layout_new</primary></indexterm><programlisting><link linkend="lglTemplateLayout">lglTemplateLayout</link> * lgl_template_layout_new             (<link linkend="gint">gint</link> nx,
                                                         <link linkend="gint">gint</link> ny,
                                                         <link linkend="gdouble">gdouble</link> x0,
                                                         <link linkend="gdouble">gdouble</link> y0,
                                                         <link linkend="gdouble">gdouble</link> dx,
                                                         <link linkend="gdouble">gdouble</link> dy);</programlisting>
<para>
This function creates a new layout structure with the given parameters.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>nx</parameter>&#160;:</term>
<listitem><simpara>  Number of labels across.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ny</parameter>&#160;:</term>
<listitem><simpara>  Number of labels down.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x0</parameter>&#160;:</term>
<listitem><simpara>  X coordinate of the top-left corner of the top-left label in the layout in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y0</parameter>&#160;:</term>
<listitem><simpara>  Y coordinate of the top-left corner of the top-left label in the layout in points.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dx</parameter>&#160;:</term>
<listitem><simpara>  Horizontal pitch in points.  This is the distance from left-edge to left-edge.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dy</parameter>&#160;:</term>
<listitem><simpara>  Vertical pitch in points.  This is the distance from top-edge to top-edge.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="lglTemplateLayout"><type>lglTemplateLayout</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-layout-dup" role="function">
<title>lgl_template_layout_dup ()</title>
<indexterm zone="lgl-template-layout-dup"><primary sortas="lgl_template_layout_dup">lgl_template_layout_dup</primary></indexterm><programlisting><link linkend="lglTemplateLayout">lglTemplateLayout</link> * lgl_template_layout_dup             (const <link linkend="lglTemplateLayout">lglTemplateLayout</link> *orig_layout);</programlisting>
<para>
This function duplicates a template layout structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>orig_layout</parameter>&#160;:</term>
<listitem><simpara> Layout to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  a newly allocated <link linkend="lglTemplateLayout"><type>lglTemplateLayout</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-layout-free" role="function">
<title>lgl_template_layout_free ()</title>
<indexterm zone="lgl-template-layout-free"><primary sortas="lgl_template_layout_free">lgl_template_layout_free</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_layout_free            (<link linkend="lglTemplateLayout">lglTemplateLayout</link> *layout);</programlisting>
<para>
This function frees all memory associated with given template layout structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>layout</parameter>&#160;:</term>
<listitem><simpara> Layout to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-margin-new" role="function">
<title>lgl_template_markup_margin_new ()</title>
<indexterm zone="lgl-template-markup-margin-new"><primary sortas="lgl_template_markup_margin_new">lgl_template_markup_margin_new</primary></indexterm><programlisting><link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * lgl_template_markup_margin_new      (<link linkend="gdouble">gdouble</link> size);</programlisting>
<para>
This function creates a new margin markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> margin size in points.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-line-new" role="function">
<title>lgl_template_markup_line_new ()</title>
<indexterm zone="lgl-template-markup-line-new"><primary sortas="lgl_template_markup_line_new">lgl_template_markup_line_new</primary></indexterm><programlisting><link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * lgl_template_markup_line_new        (<link linkend="gdouble">gdouble</link> x1,
                                                         <link linkend="gdouble">gdouble</link> y1,
                                                         <link linkend="gdouble">gdouble</link> x2,
                                                         <link linkend="gdouble">gdouble</link> y2);</programlisting>
<para>
This function creates a new line markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x1</parameter>&#160;:</term>
<listitem><simpara> x coordinate of first endpoint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&#160;:</term>
<listitem><simpara> y coordinate of first endpoint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>x2</parameter>&#160;:</term>
<listitem><simpara> x coordinate of second endpoint.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y2</parameter>&#160;:</term>
<listitem><simpara> y coordinate of second endpoint.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-circle-new" role="function">
<title>lgl_template_markup_circle_new ()</title>
<indexterm zone="lgl-template-markup-circle-new"><primary sortas="lgl_template_markup_circle_new">lgl_template_markup_circle_new</primary></indexterm><programlisting><link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * lgl_template_markup_circle_new      (<link linkend="gdouble">gdouble</link> x0,
                                                         <link linkend="gdouble">gdouble</link> y0,
                                                         <link linkend="gdouble">gdouble</link> r);</programlisting>
<para>
This function creates a new circle markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x0</parameter>&#160;:</term>
<listitem><simpara> x coordinate of center of circle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y0</parameter>&#160;:</term>
<listitem><simpara> y coordinate of center of circle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>  radius of circle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-rect-new" role="function">
<title>lgl_template_markup_rect_new ()</title>
<indexterm zone="lgl-template-markup-rect-new"><primary sortas="lgl_template_markup_rect_new">lgl_template_markup_rect_new</primary></indexterm><programlisting><link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * lgl_template_markup_rect_new        (<link linkend="gdouble">gdouble</link> x1,
                                                         <link linkend="gdouble">gdouble</link> y1,
                                                         <link linkend="gdouble">gdouble</link> w,
                                                         <link linkend="gdouble">gdouble</link> h,
                                                         <link linkend="gdouble">gdouble</link> r);</programlisting>
<para>
This function creates a new rectangle markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>x1</parameter>&#160;:</term>
<listitem><simpara> x coordinate of top-left corner of rectangle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y1</parameter>&#160;:</term>
<listitem><simpara> y coordinate of top-left corner of rectangle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>w</parameter>&#160;:</term>
<listitem><simpara>  width of rectangle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>h</parameter>&#160;:</term>
<listitem><simpara>  height of rectangle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>  radius of rounded corner.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-dup" role="function">
<title>lgl_template_markup_dup ()</title>
<indexterm zone="lgl-template-markup-dup"><primary sortas="lgl_template_markup_dup">lgl_template_markup_dup</primary></indexterm><programlisting><link linkend="lglTemplateMarkup">lglTemplateMarkup</link> * lgl_template_markup_dup             (const <link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *orig_markup);</programlisting>
<para>
This function duplicates a template markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>orig_markup</parameter>&#160;:</term>
<listitem><simpara> Markup to duplicate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  a newly allocated <link linkend="lglTemplateMarkup"><type>lglTemplateMarkup</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-template-markup-free" role="function">
<title>lgl_template_markup_free ()</title>
<indexterm zone="lgl-template-markup-free"><primary sortas="lgl_template_markup_free">lgl_template_markup_free</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_template_markup_free            (<link linkend="lglTemplateMarkup">lglTemplateMarkup</link> *markup);</programlisting>
<para>
This function frees all memory associated with given template markup structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>markup</parameter>&#160;:</term>
<listitem><simpara> Markup to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
