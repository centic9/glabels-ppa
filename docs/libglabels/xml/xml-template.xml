<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="libglabels-xml-template">
<refmeta>
<refentrytitle role="top_of_page" id="libglabels-xml-template.top_of_page">XML Template Functions</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGLABELS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>XML Template Functions</refname>
<refpurpose>Functions to create and parse glabels XML template nodes and files</refpurpose>
</refnamediv>

<refsynopsisdiv id="libglabels-xml-template.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libglabels/xml-templates.h&gt;

<link linkend="GList">GList</link> *             <link linkend="lgl-xml-template-read-templates-from-file">lgl_xml_template_read_templates_from_file</link>
                                                        (const <link linkend="gchar">gchar</link> *utf8_filename);
<link linkend="GList">GList</link> *             <link linkend="lgl-xml-template-parse-templates-doc">lgl_xml_template_parse_templates_doc</link>
                                                        (const <link linkend="xmlDocPtr">xmlDocPtr</link> templates_doc);
<link linkend="lglTemplate">lglTemplate</link> *       <link linkend="lgl-xml-template-parse-template-node">lgl_xml_template_parse_template_node</link>
                                                        (const <link linkend="xmlNodePtr">xmlNodePtr</link> template_node);
<link linkend="gint">gint</link>                <link linkend="lgl-xml-template-write-templates-to-file">lgl_xml_template_write_templates_to_file</link>
                                                        (<link linkend="GList">GList</link> *templates,
                                                         const <link linkend="gchar">gchar</link> *utf8_filename);
<link linkend="gint">gint</link>                <link linkend="lgl-xml-template-write-template-to-file">lgl_xml_template_write_template_to_file</link>
                                                        (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *utf8_filename);
<link linkend="void">void</link>                <link linkend="lgl-xml-template-create-template-node">lgl_xml_template_create_template_node</link>
                                                        (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="xmlNodePtr">xmlNodePtr</link> root,
                                                         const <link linkend="xmlNsPtr">xmlNsPtr</link> ns);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libglabels-xml-template.description" role="desc">
<title role="desc.title">Description</title>
<para>
This section describes a number of functions for creating and parsing
glabels XML template nodes and files.  Template nodes are used in both
template files and document files.
</para>
</refsect1>

<refsect1 id="libglabels-xml-template.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="lgl-xml-template-read-templates-from-file" role="function">
<title>lgl_xml_template_read_templates_from_file ()</title>
<indexterm zone="lgl-xml-template-read-templates-from-file"><primary sortas="lgl_xml_template_read_templates_from_file">lgl_xml_template_read_templates_from_file</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_xml_template_read_templates_from_file
                                                        (const <link linkend="gchar">gchar</link> *utf8_filename);</programlisting>
<para>
Read glabels templates from template file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>utf8_filename</parameter>&#160;:</term>
<listitem><simpara>       Filename of papers file (name encoded as UTF-8)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of <link linkend="lglTemplate"><type>lglTemplate</type></link> structures.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-xml-template-parse-templates-doc" role="function">
<title>lgl_xml_template_parse_templates_doc ()</title>
<indexterm zone="lgl-xml-template-parse-templates-doc"><primary sortas="lgl_xml_template_parse_templates_doc">lgl_xml_template_parse_templates_doc</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_xml_template_parse_templates_doc
                                                        (const <link linkend="xmlDocPtr">xmlDocPtr</link> templates_doc);</programlisting>
<para>
Read glabels templates from a libxml <link linkend="xmlDocPtr"><type>xmlDocPtr</type></link> tree.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>templates_doc</parameter>&#160;:</term>
<listitem><simpara>  libxml <link linkend="xmlDocPtr"><type>xmlDocPtr</type></link> tree, representing template file.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of <link linkend="lglTemplate"><type>lglTemplate</type></link> structures.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-xml-template-parse-template-node" role="function">
<title>lgl_xml_template_parse_template_node ()</title>
<indexterm zone="lgl-xml-template-parse-template-node"><primary sortas="lgl_xml_template_parse_template_node">lgl_xml_template_parse_template_node</primary></indexterm><programlisting><link linkend="lglTemplate">lglTemplate</link> *       lgl_xml_template_parse_template_node
                                                        (const <link linkend="xmlNodePtr">xmlNodePtr</link> template_node);</programlisting>
<para>
Read a single glabels template from a libxml <link linkend="xmlNodePtr"><type>xmlNodePtr</type></link> node.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template_node</parameter>&#160;:</term>
<listitem><simpara>  libxml <link linkend="xmlNodePtr"><type>xmlNodePtr</type></link> template node from a <link linkend="xmlDocPtr"><type>xmlDocPtr</type></link> tree.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a pointer to a newly created <link linkend="lglTemplate"><type>lglTemplate</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-xml-template-write-templates-to-file" role="function">
<title>lgl_xml_template_write_templates_to_file ()</title>
<indexterm zone="lgl-xml-template-write-templates-to-file"><primary sortas="lgl_xml_template_write_templates_to_file">lgl_xml_template_write_templates_to_file</primary></indexterm><programlisting><link linkend="gint">gint</link>                lgl_xml_template_write_templates_to_file
                                                        (<link linkend="GList">GList</link> *templates,
                                                         const <link linkend="gchar">gchar</link> *utf8_filename);</programlisting>
<para>
Write a list of <link linkend="lglTemplate"><type>lglTemplate</type></link> structures to a glabels XML template file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>templates</parameter>&#160;:</term>
<listitem><simpara>      List of <link linkend="lglTemplate"><type>lglTemplate</type></link> structures
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>utf8_filename</parameter>&#160;:</term>
<listitem><simpara>  Filename of templates file (name encoded as UTF-8)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of bytes written or -1 in case of failure

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-xml-template-write-template-to-file" role="function">
<title>lgl_xml_template_write_template_to_file ()</title>
<indexterm zone="lgl-xml-template-write-template-to-file"><primary sortas="lgl_xml_template_write_template_to_file">lgl_xml_template_write_template_to_file</primary></indexterm><programlisting><link linkend="gint">gint</link>                lgl_xml_template_write_template_to_file
                                                        (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         const <link linkend="gchar">gchar</link> *utf8_filename);</programlisting>
<para>
Write a single <link linkend="lglTemplate"><type>lglTemplate</type></link> structures to a glabels XML template file.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>       <link linkend="lglTemplate"><type>lglTemplate</type></link> structure to be written
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>utf8_filename</parameter>&#160;:</term>
<listitem><simpara>  Filename of templates file (name encoded as UTF-8)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of bytes written or -1 in case of failure

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-xml-template-create-template-node" role="function">
<title>lgl_xml_template_create_template_node ()</title>
<indexterm zone="lgl-xml-template-create-template-node"><primary sortas="lgl_xml_template_create_template_node">lgl_xml_template_create_template_node</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_xml_template_create_template_node
                                                        (const <link linkend="lglTemplate">lglTemplate</link> *template,
                                                         <link linkend="xmlNodePtr">xmlNodePtr</link> root,
                                                         const <link linkend="xmlNsPtr">xmlNsPtr</link> ns);</programlisting>
<para>
Add a single <link linkend="lglTemplate"><type>lglTemplate</type></link> child node to given <link linkend="xmlNodePtr"><type>xmlNodePtr</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>       <link linkend="lglTemplate"><type>lglTemplate</type></link> structure to be written
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>           parent node to receive new child node
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ns</parameter>&#160;:</term>
<listitem><simpara>             a libxml <link linkend="xmlNsPtr"><type>xmlNsPtr</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
