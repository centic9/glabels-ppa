<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="libglabels-db">
<refmeta>
<refentrytitle role="top_of_page" id="libglabels-db.top_of_page">Database</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGLABELS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Database</refname>
<refpurpose>Database of pre-defined templates</refpurpose>
</refnamediv>

<refsynopsisdiv id="libglabels-db.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;libglabels/db.h&gt;

enum                <link linkend="lglDbRegStatus">lglDbRegStatus</link>;

<link linkend="void">void</link>                <link linkend="lgl-db-init">lgl_db_init</link>                         (void);

<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-paper-id-list">lgl_db_get_paper_id_list</link>            (void);
<link linkend="void">void</link>                <link linkend="lgl-db-free-paper-id-list">lgl_db_free_paper_id_list</link>           (<link linkend="GList">GList</link> *ids);
<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-paper-name-list">lgl_db_get_paper_name_list</link>          (void);
<link linkend="void">void</link>                <link linkend="lgl-db-free-paper-name-list">lgl_db_free_paper_name_list</link>         (<link linkend="GList">GList</link> *names);
<link linkend="lglPaper">lglPaper</link> *          <link linkend="lgl-db-lookup-paper-from-id">lgl_db_lookup_paper_from_id</link>         (const <link linkend="gchar">gchar</link> *id);
<link linkend="lglPaper">lglPaper</link> *          <link linkend="lgl-db-lookup-paper-from-name">lgl_db_lookup_paper_from_name</link>       (const <link linkend="gchar">gchar</link> *name);
<link linkend="gchar">gchar</link> *             <link linkend="lgl-db-lookup-paper-id-from-name">lgl_db_lookup_paper_id_from_name</link>    (const <link linkend="gchar">gchar</link> *name);
<link linkend="gchar">gchar</link> *             <link linkend="lgl-db-lookup-paper-name-from-id">lgl_db_lookup_paper_name_from_id</link>    (const <link linkend="gchar">gchar</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-db-is-paper-id-known">lgl_db_is_paper_id_known</link>            (const <link linkend="gchar">gchar</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-db-is-paper-id-other">lgl_db_is_paper_id_other</link>            (const <link linkend="gchar">gchar</link> *id);

<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-category-id-list">lgl_db_get_category_id_list</link>         (void);
<link linkend="void">void</link>                <link linkend="lgl-db-free-category-id-list">lgl_db_free_category_id_list</link>        (<link linkend="GList">GList</link> *ids);
<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-category-name-list">lgl_db_get_category_name_list</link>       (void);
<link linkend="void">void</link>                <link linkend="lgl-db-free-category-name-list">lgl_db_free_category_name_list</link>      (<link linkend="GList">GList</link> *names);
<link linkend="lglCategory">lglCategory</link> *       <link linkend="lgl-db-lookup-category-from-id">lgl_db_lookup_category_from_id</link>      (const <link linkend="gchar">gchar</link> *id);
<link linkend="lglCategory">lglCategory</link> *       <link linkend="lgl-db-lookup-category-from-name">lgl_db_lookup_category_from_name</link>    (const <link linkend="gchar">gchar</link> *name);
<link linkend="gchar">gchar</link> *             <link linkend="lgl-db-lookup-category-id-from-name">lgl_db_lookup_category_id_from_name</link> (const <link linkend="gchar">gchar</link> *name);
<link linkend="gchar">gchar</link> *             <link linkend="lgl-db-lookup-category-name-from-id">lgl_db_lookup_category_name_from_id</link> (const <link linkend="gchar">gchar</link> *id);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-db-is-category-id-known">lgl_db_is_category_id_known</link>         (const <link linkend="gchar">gchar</link> *id);

<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-brand-list">lgl_db_get_brand_list</link>               (const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);
<link linkend="void">void</link>                <link linkend="lgl-db-free-brand-list">lgl_db_free_brand_list</link>              (<link linkend="GList">GList</link> *brands);

<link linkend="lglDbRegStatus">lglDbRegStatus</link>      <link linkend="lgl-db-register-template">lgl_db_register_template</link>            (const <link linkend="lglTemplate">lglTemplate</link> *template);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-db-does-template-exist">lgl_db_does_template_exist</link>          (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part);
<link linkend="gboolean">gboolean</link>            <link linkend="lgl-db-does-template-name-exist">lgl_db_does_template_name_exist</link>     (const <link linkend="gchar">gchar</link> *name);
<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-template-name-list-unique">lgl_db_get_template_name_list_unique</link>
                                                        (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);
<link linkend="GList">GList</link> *             <link linkend="lgl-db-get-template-name-list-all">lgl_db_get_template_name_list_all</link>   (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);
<link linkend="void">void</link>                <link linkend="lgl-db-free-template-name-list">lgl_db_free_template_name_list</link>      (<link linkend="GList">GList</link> *names);
<link linkend="lglTemplate">lglTemplate</link> *       <link linkend="lgl-db-lookup-template-from-name">lgl_db_lookup_template_from_name</link>    (const <link linkend="gchar">gchar</link> *name);

<link linkend="void">void</link>                <link linkend="lgl-db-print-known-papers">lgl_db_print_known_papers</link>           (void);
<link linkend="void">void</link>                <link linkend="lgl-db-print-known-categories">lgl_db_print_known_categories</link>       (void);
<link linkend="void">void</link>                <link linkend="lgl-db-print-known-templates">lgl_db_print_known_templates</link>        (void);
<link linkend="void">void</link>                <link linkend="lgl-db-print-aliases">lgl_db_print_aliases</link>                (const <link linkend="lglTemplate">lglTemplate</link> *template);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libglabels-db.description" role="desc">
<title role="desc.title">Description</title>
<para>
This section describes a set of functions to locate and add templates and related information in
the LibGlabels template database.
</para>
</refsect1>

<refsect1 id="libglabels-db.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="lglDbRegStatus" role="enum">
<title>enum lglDbRegStatus</title>
<indexterm zone="lglDbRegStatus"><primary sortas="lglDbRegStatus">lglDbRegStatus</primary></indexterm><programlisting>typedef enum
{
        LGL_DB_REG_OK                =  0,
        LGL_DB_REG_BAD_PAPER_ID      = -1,
        LGL_DB_REG_BRAND_PART_EXISTS = -2,
        LGL_DB_REG_FILE_WRITE_ERROR  = -3
} lglDbRegStatus;
</programlisting>
<para>
This enumeration defines a set of possible return values for <link linkend="lgl-db-register-template"><function>lgl_db_register_template()</function></link>.
</para><variablelist role="enum">
<varlistentry id="LGL-DB-REG-OK--CAPS" role="constant">
<term><literal>LGL_DB_REG_OK</literal></term>
<listitem><simpara>Registration successful.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-DB-REG-BAD-PAPER-ID--CAPS" role="constant">
<term><literal>LGL_DB_REG_BAD_PAPER_ID</literal></term>
<listitem><simpara> Registration failed because paper id is unknown.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-DB-REG-BRAND-PART-EXISTS--CAPS" role="constant">
<term><literal>LGL_DB_REG_BRAND_PART_EXISTS</literal></term>
<listitem><simpara>Registration failed because template with same brand and part name/number already exists.
</simpara></listitem>
</varlistentry>
<varlistentry id="LGL-DB-REG-FILE-WRITE-ERROR--CAPS" role="constant">
<term><literal>LGL_DB_REG_FILE_WRITE_ERROR</literal></term>
<listitem><simpara>Registration failed because an error while writing to disk.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-init" role="function">
<title>lgl_db_init ()</title>
<indexterm zone="lgl-db-init"><primary sortas="lgl_db_init">lgl_db_init</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_init                         (void);</programlisting>
<para>
Initialize all libglabels subsystems.  It is not necessary for an application to call
<link linkend="lgl-db-init"><function>lgl_db_init()</function></link>, because libglabels will initialize on demand.  An application programmer may
choose to call <link linkend="lgl-db-init"><function>lgl_db_init()</function></link> at startup to minimize the impact of the first libglabels call
on GUI response time.
</para>
<para>
This function initializes its paper definitions, category definitions, and its template
database.. It will search both system and user template directories to locate
this data.</para>
<para>
</para></refsect2>
<refsect2 id="lgl-db-get-paper-id-list" role="function">
<title>lgl_db_get_paper_id_list ()</title>
<indexterm zone="lgl-db-get-paper-id-list"><primary sortas="lgl_db_get_paper_id_list">lgl_db_get_paper_id_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_paper_id_list            (void);</programlisting>
<para>
Get a list of all paper ids known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of paper ids.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-paper-id-list" role="function">
<title>lgl_db_free_paper_id_list ()</title>
<indexterm zone="lgl-db-free-paper-id-list"><primary sortas="lgl_db_free_paper_id_list">lgl_db_free_paper_id_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_paper_id_list           (<link linkend="GList">GList</link> *ids);</programlisting>
<para>
Free up all storage associated with an id list obtained with
<link linkend="lgl-db-get-paper-id-list"><function>lgl_db_get_paper_id_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ids</parameter>&#160;:</term>
<listitem><simpara> List of id strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-paper-name-list" role="function">
<title>lgl_db_get_paper_name_list ()</title>
<indexterm zone="lgl-db-get-paper-name-list"><primary sortas="lgl_db_get_paper_name_list">lgl_db_get_paper_name_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_paper_name_list          (void);</programlisting>
<para>
Get a list of all localized paper names known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of localized paper names.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-paper-name-list" role="function">
<title>lgl_db_free_paper_name_list ()</title>
<indexterm zone="lgl-db-free-paper-name-list"><primary sortas="lgl_db_free_paper_name_list">lgl_db_free_paper_name_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_paper_name_list         (<link linkend="GList">GList</link> *names);</programlisting>
<para>
Free up all storage associated with a name list obtained with
<link linkend="lgl-db-get-paper-name-list"><function>lgl_db_get_paper_name_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>names</parameter>&#160;:</term>
<listitem><simpara> List of localized paper name strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-paper-from-id" role="function">
<title>lgl_db_lookup_paper_from_id ()</title>
<indexterm zone="lgl-db-lookup-paper-from-id"><primary sortas="lgl_db_lookup_paper_from_id">lgl_db_lookup_paper_from_id</primary></indexterm><programlisting><link linkend="lglPaper">lglPaper</link> *          lgl_db_lookup_paper_from_id         (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Lookup paper definition from id string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> paper id string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglPaper"><type>lglPaper</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-paper-from-name" role="function">
<title>lgl_db_lookup_paper_from_name ()</title>
<indexterm zone="lgl-db-lookup-paper-from-name"><primary sortas="lgl_db_lookup_paper_from_name">lgl_db_lookup_paper_from_name</primary></indexterm><programlisting><link linkend="lglPaper">lglPaper</link> *          lgl_db_lookup_paper_from_name       (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Lookup paper definition from localized paper name string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> localized paper name string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglPaper"><type>lglPaper</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-paper-id-from-name" role="function">
<title>lgl_db_lookup_paper_id_from_name ()</title>
<indexterm zone="lgl-db-lookup-paper-id-from-name"><primary sortas="lgl_db_lookup_paper_id_from_name">lgl_db_lookup_paper_id_from_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lgl_db_lookup_paper_id_from_name    (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Lookup paper name string from localized paper name string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> localized paper name stringp
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated id string.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-paper-name-from-id" role="function">
<title>lgl_db_lookup_paper_name_from_id ()</title>
<indexterm zone="lgl-db-lookup-paper-name-from-id"><primary sortas="lgl_db_lookup_paper_name_from_id">lgl_db_lookup_paper_name_from_id</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lgl_db_lookup_paper_name_from_id    (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Lookup localized paper name string from paper id string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> paper id string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated localized paper name string.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-is-paper-id-known" role="function">
<title>lgl_db_is_paper_id_known ()</title>
<indexterm zone="lgl-db-is-paper-id-known"><primary sortas="lgl_db_is_paper_id_known">lgl_db_is_paper_id_known</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_db_is_paper_id_known            (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Determine if given paper id is known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> paper id to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if id is known, otherwise FALSE.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-is-paper-id-other" role="function">
<title>lgl_db_is_paper_id_other ()</title>
<indexterm zone="lgl-db-is-paper-id-other"><primary sortas="lgl_db_is_paper_id_other">lgl_db_is_paper_id_other</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_db_is_paper_id_other            (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Determine if given paper id is the special id "Other."</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> paper id to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if id is "Other", otherwise FALSE.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-category-id-list" role="function">
<title>lgl_db_get_category_id_list ()</title>
<indexterm zone="lgl-db-get-category-id-list"><primary sortas="lgl_db_get_category_id_list">lgl_db_get_category_id_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_category_id_list         (void);</programlisting>
<para>
Get a list of all category ids known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of category ids.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-category-id-list" role="function">
<title>lgl_db_free_category_id_list ()</title>
<indexterm zone="lgl-db-free-category-id-list"><primary sortas="lgl_db_free_category_id_list">lgl_db_free_category_id_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_category_id_list        (<link linkend="GList">GList</link> *ids);</programlisting>
<para>
Free up all storage associated with an id list obtained with
<link linkend="lgl-db-get-category-id-list"><function>lgl_db_get_category_id_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ids</parameter>&#160;:</term>
<listitem><simpara> List of id strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-category-name-list" role="function">
<title>lgl_db_get_category_name_list ()</title>
<indexterm zone="lgl-db-get-category-name-list"><primary sortas="lgl_db_get_category_name_list">lgl_db_get_category_name_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_category_name_list       (void);</programlisting>
<para>
Get a list of all localized category names known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of localized category names.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-category-name-list" role="function">
<title>lgl_db_free_category_name_list ()</title>
<indexterm zone="lgl-db-free-category-name-list"><primary sortas="lgl_db_free_category_name_list">lgl_db_free_category_name_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_category_name_list      (<link linkend="GList">GList</link> *names);</programlisting>
<para>
Free up all storage associated with a name list obtained with
<link linkend="lgl-db-get-category-name-list"><function>lgl_db_get_category_name_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>names</parameter>&#160;:</term>
<listitem><simpara> List of localized category name strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-category-from-id" role="function">
<title>lgl_db_lookup_category_from_id ()</title>
<indexterm zone="lgl-db-lookup-category-from-id"><primary sortas="lgl_db_lookup_category_from_id">lgl_db_lookup_category_from_id</primary></indexterm><programlisting><link linkend="lglCategory">lglCategory</link> *       lgl_db_lookup_category_from_id      (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Lookup category definition from id string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> category id string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglCategory"><type>lglCategory</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-category-from-name" role="function">
<title>lgl_db_lookup_category_from_name ()</title>
<indexterm zone="lgl-db-lookup-category-from-name"><primary sortas="lgl_db_lookup_category_from_name">lgl_db_lookup_category_from_name</primary></indexterm><programlisting><link linkend="lglCategory">lglCategory</link> *       lgl_db_lookup_category_from_name    (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Lookup category definition from localized category name string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> localized category name string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglCategory"><type>lglCategory</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-category-id-from-name" role="function">
<title>lgl_db_lookup_category_id_from_name ()</title>
<indexterm zone="lgl-db-lookup-category-id-from-name"><primary sortas="lgl_db_lookup_category_id_from_name">lgl_db_lookup_category_id_from_name</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lgl_db_lookup_category_id_from_name (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Lookup category name string from localized category name string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> localized category name stringp
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated id string.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-category-name-from-id" role="function">
<title>lgl_db_lookup_category_name_from_id ()</title>
<indexterm zone="lgl-db-lookup-category-name-from-id"><primary sortas="lgl_db_lookup_category_name_from_id">lgl_db_lookup_category_name_from_id</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lgl_db_lookup_category_name_from_id (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Lookup localized category name string from category id string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> category id string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated localized category name string.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-is-category-id-known" role="function">
<title>lgl_db_is_category_id_known ()</title>
<indexterm zone="lgl-db-is-category-id-known"><primary sortas="lgl_db_is_category_id_known">lgl_db_is_category_id_known</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_db_is_category_id_known         (const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
Determine if given category id is known to libglabels.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> category id to test
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if id is known, otherwise FALSE.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-brand-list" role="function">
<title>lgl_db_get_brand_list ()</title>
<indexterm zone="lgl-db-get-brand-list"><primary sortas="lgl_db_get_brand_list">lgl_db_get_brand_list</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_brand_list               (const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);</programlisting>
<para>
Get a list of all valid brands of templates in the template database.
Results can be filtered by page size and/or template category.  A list of valid page
sizes can be obtained using <link linkend="lgl-db-get-paper-id-list"><function>lgl_db_get_paper_id_list()</function></link>.  A list of valid template
categories can be obtained using <link linkend="lgl-db-get-category-id-list"><function>lgl_db_get_category_id_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>paper_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given page size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given template category.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of brands
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-brand-list" role="function">
<title>lgl_db_free_brand_list ()</title>
<indexterm zone="lgl-db-free-brand-list"><primary sortas="lgl_db_free_brand_list">lgl_db_free_brand_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_brand_list              (<link linkend="GList">GList</link> *brands);</programlisting>
<para>
Free up all storage associated with a list of template names obtained with
<link linkend="lgl-db-get-brand-list"><function>lgl_db_get_brand_list()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brands</parameter>&#160;:</term>
<listitem><simpara> List of template brand strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-register-template" role="function">
<title>lgl_db_register_template ()</title>
<indexterm zone="lgl-db-register-template"><primary sortas="lgl_db_register_template">lgl_db_register_template</primary></indexterm><programlisting><link linkend="lglDbRegStatus">lglDbRegStatus</link>      lgl_db_register_template            (const <link linkend="lglTemplate">lglTemplate</link> *template);</programlisting>
<para>
Register a template.  This function adds a template to the template database.
The template will be stored in an individual XML file in the user template directory.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara>  Pointer to a template structure to add to database.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Status of registration attempt (<link linkend="lglDbRegStatus"><type>lglDbRegStatus</type></link>)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-does-template-exist" role="function">
<title>lgl_db_does_template_exist ()</title>
<indexterm zone="lgl-db-does-template-exist"><primary sortas="lgl_db_does_template_exist">lgl_db_does_template_exist</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_db_does_template_exist          (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *part);</programlisting>
<para>
This function tests whether a template with the given brand and part name/number exists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara> Brand name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>part</parameter>&#160;:</term>
<listitem><simpara>  Part name/number.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>  TRUE if such a template exists in the database.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-does-template-name-exist" role="function">
<title>lgl_db_does_template_name_exist ()</title>
<indexterm zone="lgl-db-does-template-name-exist"><primary sortas="lgl_db_does_template_name_exist">lgl_db_does_template_name_exist</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lgl_db_does_template_name_exist     (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
This function test whether a template with the given name exists.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if such a template exists in the database.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-template-name-list-unique" role="function">
<title>lgl_db_get_template_name_list_unique ()</title>
<indexterm zone="lgl-db-get-template-name-list-unique"><primary sortas="lgl_db_get_template_name_list_unique">lgl_db_get_template_name_list_unique</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_template_name_list_unique
                                                        (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);</programlisting>
<para>
Get a list of valid names of unique templates in the template database.  Results
can be filtered by page size and/or template category.  A list of valid page sizes
can be obtained using <link linkend="lgl-db-get-paper-id-list"><function>lgl_db_get_paper_id_list()</function></link>.  A list of valid template categories
can be obtained using <link linkend="lgl-db-get-category-id-list"><function>lgl_db_get_category_id_list()</function></link>.
</para>
<para>
This function differs from <link linkend="lgl-db-get-template-name-list-all"><function>lgl_db_get_template_name_list_all()</function></link>, because it does not
return multiple names for the same template.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara>     If non NULL, limit results to given brand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>paper_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given page size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given template category.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of template names.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-get-template-name-list-all" role="function">
<title>lgl_db_get_template_name_list_all ()</title>
<indexterm zone="lgl-db-get-template-name-list-all"><primary sortas="lgl_db_get_template_name_list_all">lgl_db_get_template_name_list_all</primary></indexterm><programlisting><link linkend="GList">GList</link> *             lgl_db_get_template_name_list_all   (const <link linkend="gchar">gchar</link> *brand,
                                                         const <link linkend="gchar">gchar</link> *paper_id,
                                                         const <link linkend="gchar">gchar</link> *category_id);</programlisting>
<para>
Get a list of all valid names and aliases of templates in the template database.
Results can be filtered by page size and/or template category.  A list of valid page
sizes can be obtained using <link linkend="lgl-db-get-paper-id-list"><function>lgl_db_get_paper_id_list()</function></link>.  A list of valid template
categories can be obtained using <link linkend="lgl-db-get-category-id-list"><function>lgl_db_get_category_id_list()</function></link>.
</para>
<para>
This function differs from <link linkend="lgl-db-get-template-name-list-unique"><function>lgl_db_get_template_name_list_unique()</function></link>, because it will
return multiple names for the same template.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>brand</parameter>&#160;:</term>
<listitem><simpara>     If non NULL, limit results to given brand
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>paper_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given page size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>category_id</parameter>&#160;:</term>
<listitem><simpara> If non NULL, limit results to given template category.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a list of template names and aliases.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-free-template-name-list" role="function">
<title>lgl_db_free_template_name_list ()</title>
<indexterm zone="lgl-db-free-template-name-list"><primary sortas="lgl_db_free_template_name_list">lgl_db_free_template_name_list</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_free_template_name_list      (<link linkend="GList">GList</link> *names);</programlisting>
<para>
Free up all storage associated with a list of template names obtained with
<link linkend="lgl-db-get-template-name-list-all"><function>lgl_db_get_template_name_list_all()</function></link> or <link linkend="lgl-db-get-template-name-list-unique"><function>lgl_db_get_template_name_list_unique()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>names</parameter>&#160;:</term>
<listitem><simpara> List of template name strings to be freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-lookup-template-from-name" role="function">
<title>lgl_db_lookup_template_from_name ()</title>
<indexterm zone="lgl-db-lookup-template-from-name"><primary sortas="lgl_db_lookup_template_from_name">lgl_db_lookup_template_from_name</primary></indexterm><programlisting><link linkend="lglTemplate">lglTemplate</link> *       lgl_db_lookup_template_from_name    (const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Lookup template in template database from name string.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name string
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to a newly allocated <link linkend="lglTemplate"><type>lglTemplate</type></link> structure.

</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lgl-db-print-known-papers" role="function">
<title>lgl_db_print_known_papers ()</title>
<indexterm zone="lgl-db-print-known-papers"><primary sortas="lgl_db_print_known_papers">lgl_db_print_known_papers</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_print_known_papers           (void);</programlisting>
<para>
For debugging purposes: print a list of all paper definitions known to
libglabels.</para>
<para>
</para></refsect2>
<refsect2 id="lgl-db-print-known-categories" role="function">
<title>lgl_db_print_known_categories ()</title>
<indexterm zone="lgl-db-print-known-categories"><primary sortas="lgl_db_print_known_categories">lgl_db_print_known_categories</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_print_known_categories       (void);</programlisting>
<para>
For debugging purposes: print a list of all category definitions known to
libglabels.</para>
<para>
</para></refsect2>
<refsect2 id="lgl-db-print-known-templates" role="function">
<title>lgl_db_print_known_templates ()</title>
<indexterm zone="lgl-db-print-known-templates"><primary sortas="lgl_db_print_known_templates">lgl_db_print_known_templates</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_print_known_templates        (void);</programlisting>
<para>
Print all known templates (for debugging purposes).</para>
<para>
</para></refsect2>
<refsect2 id="lgl-db-print-aliases" role="function">
<title>lgl_db_print_aliases ()</title>
<indexterm zone="lgl-db-print-aliases"><primary sortas="lgl_db_print_aliases">lgl_db_print_aliases</primary></indexterm><programlisting><link linkend="void">void</link>                lgl_db_print_aliases                (const <link linkend="lglTemplate">lglTemplate</link> *template);</programlisting>
<para>
Print all aliases of a template (for debugging purposes).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>template</parameter>&#160;:</term>
<listitem><simpara> template
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
